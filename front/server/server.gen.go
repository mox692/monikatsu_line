// Package openapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// コレクションアイテム一覧情報取得API
	// (GET /collection/list)
	GetCollectionList(ctx echo.Context, params GetCollectionListParams) error
	// ガチャ実行API
	// (POST /gacha/draw)
	PostGachaDraw(ctx echo.Context, params PostGachaDrawParams) error
	// インゲーム終了API
	// (POST /game/finish)
	PostGameFinish(ctx echo.Context, params PostGameFinishParams) error
	// ランキング情報取得API
	// (GET /ranking/list)
	GetRankingList(ctx echo.Context, params GetRankingListParams) error
	// 設定取得API
	// (GET /setting/get)
	GetSettingGet(ctx echo.Context) error
	// ユーザ情報作成API
	// (POST /user/create)
	PostUserCreate(ctx echo.Context) error
	// ユーザ情報取得API
	// (GET /user/get)
	GetUserGet(ctx echo.Context, params GetUserGetParams) error
	// ユーザ情報更新API
	// (POST /user/update)
	PostUserUpdate(ctx echo.Context, params PostUserUpdateParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCollectionList converts echo context to params.
func (w *ServerInterfaceWrapper) GetCollectionList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCollectionListParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-token")]; found {
		var XToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-token, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-token", valueList[0], &XToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-token: %s", err))
		}

		params.XToken = XToken
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-token is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCollectionList(ctx, params)
	return err
}

// PostGachaDraw converts echo context to params.
func (w *ServerInterfaceWrapper) PostGachaDraw(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostGachaDrawParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-token")]; found {
		var XToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-token, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-token", valueList[0], &XToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-token: %s", err))
		}

		params.XToken = XToken
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-token is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGachaDraw(ctx, params)
	return err
}

// PostGameFinish converts echo context to params.
func (w *ServerInterfaceWrapper) PostGameFinish(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostGameFinishParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-token")]; found {
		var XToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-token, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-token", valueList[0], &XToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-token: %s", err))
		}

		params.XToken = XToken
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-token is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGameFinish(ctx, params)
	return err
}

// GetRankingList converts echo context to params.
func (w *ServerInterfaceWrapper) GetRankingList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRankingListParams
	// ------------- Required query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, true, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-token")]; found {
		var XToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-token, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-token", valueList[0], &XToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-token: %s", err))
		}

		params.XToken = XToken
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-token is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRankingList(ctx, params)
	return err
}

// GetSettingGet converts echo context to params.
func (w *ServerInterfaceWrapper) GetSettingGet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSettingGet(ctx)
	return err
}

// PostUserCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserCreate(ctx)
	return err
}

// GetUserGet converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserGet(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserGetParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-token")]; found {
		var XToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-token, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-token", valueList[0], &XToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-token: %s", err))
		}

		params.XToken = XToken
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-token is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserGet(ctx, params)
	return err
}

// PostUserUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserUpdate(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostUserUpdateParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-token")]; found {
		var XToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-token, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-token", valueList[0], &XToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-token: %s", err))
		}

		params.XToken = XToken
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-token is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserUpdate(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/collection/list", wrapper.GetCollectionList)
	router.POST(baseURL+"/gacha/draw", wrapper.PostGachaDraw)
	router.POST(baseURL+"/game/finish", wrapper.PostGameFinish)
	router.GET(baseURL+"/ranking/list", wrapper.GetRankingList)
	router.GET(baseURL+"/setting/get", wrapper.GetSettingGet)
	router.POST(baseURL+"/user/create", wrapper.PostUserCreate)
	router.GET(baseURL+"/user/get", wrapper.GetUserGet)
	router.POST(baseURL+"/user/update", wrapper.PostUserUpdate)

}
